#!/usr/bin/perl
#
# Copyright 2014 Pierre Mavro <deimos@deimos.fr>
# Copyright 2014 Vivien Didelot <vivien@didelot.org>
#
# Licensed under the terms of the GNU GPL v3, or any later version.
#
# This script is meant to use with i3blocks. It parses the output of the "acpi"
# command (often provided by a package of the same name) to read the status of
# the battery, and eventually its remaining time (to full charge or discharge).
#
# The color will gradually change for a percentage below 85%, and the urgency
# (exit code 33) is set if there is less that 5% remaining.
# click to enable fullcharge
if ($ENV{BLOCK_BUTTON} == "1") {
    # body...
    #my $output = `kitty --hold --name floating -e sudo tlp fullcharge`;
    my $output = `urxvt --geometry 24x6 --hold --name floating -e ~/bin/ideapad_battery_conservation_toggle.sh`;
    #`urxvt--name floating -e ~/bin/ideapad_battery_conservation_toggle.sh`;

}
                

use strict;
use warnings;
use utf8;

my $acpi;
my $status;
my $percent;
my $ac_adapt;
my $full_text;
my $short_text;
my $bat_number = $ENV{BLOCK_INSTANCE} || 0;

# read the first line of the "acpi" command output
open (ACPI, "acpi -b | grep 'Battery $bat_number' |") or die;
$acpi = <ACPI>;
close(ACPI);

 #fail on unexpected output
 if ($acpi !~ /: (\w+), (\d+)%/) {
     die "$acpi\n";
 }

$status = $1;
$percent = $2;
$full_text = "$percent%";
$short_text = $full_text;
if ($acpi =~ /(\d\d:\d\d):/) {
	$full_text .= " ($1)";
}

if ($status eq 'Discharging') {
    if ($percent < 5) {
        print " ";
        print "$full_text\n";
        print "$short_text\n";
        print "#FF0000\n";
    } elsif ($percent < 20) {
        print " ";
        print "$full_text\n";
        print "$short_text\n";
        print "#FF0000\n";
    } elsif ($percent < 40) {
        print " ";
        print "$full_text\n";
        print "$short_text\n";
        print "#FFAE00\n";
    } elsif ($percent < 60) {
        print " ";
        print "$full_text\n";
        print "$short_text\n";
        print "#FFF600\n";
    } elsif ($percent < 85) {
        print " ";
        print "$full_text\n";
        print "$short_text\n";
        print "#A8FF00\n";
    } else {
        print " ";
        print "$full_text\n";
        print "$short_text\n";
        print "#A8FF00\n";
    }

    if ($percent < 5) {
        exit(33);
    }
} elsif ($status eq 'Charging') {
    print ' ';
    print "$full_text\n";
    print "$short_text\n";
} elsif ($status eq 'Unknown') {
	open (AC_ADAPTER, "acpi -a |") or die;
	$ac_adapt = <AC_ADAPTER>;
	close(AC_ADAPTER);

	if ($ac_adapt =~ /: ([\w-]+)/) {
		$ac_adapt = $1;

		if ($ac_adapt eq 'on-line') {
                        print ' ';
                        print "$full_text\n";
                        print "$short_text\n";
		} elsif ($ac_adapt eq 'off-line') {
                    exit(33);
                    # print " ";
                    # print "$full_text\n";
                    # print "$short_text\n";
                    # if ($percent < 10) {
                    # print "#FF0000\n";
                # }
        }
} 

} elsif($status eq 'Full'){
    print " ";
    print "$full_text\n";
    print "$short_text\n";
        
}



# print text

# consider color and urgent flag only on discharge
#if ($status eq 'Discharging') {

#else{
#}

exit(0);
